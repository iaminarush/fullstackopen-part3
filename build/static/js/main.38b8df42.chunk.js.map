{"version":3,"sources":["services/persons.js","App.js","reportWebVitals.js","index.js"],"names":["baseUrl","personService","getAll","axios","get","createPerson","newObject","post","deletePerson","id","delete","updatePerson","object","put","Filter","props","Form","onSubmit","handleSubmit","value","newName","onChange","handleNameChange","newNumber","handleNumberChange","type","Phonebook","persons","filter","handleDelete","person","name","toLowerCase","includes","map","filteredPerson","number","onClick","Notification","message","className","App","useState","setPersons","setNewName","setNewNumber","setFilter","notificationMessage","setNotificationMessage","notificationType","setNotificationType","useEffect","then","response","data","e","target","preventDefault","obj","find","window","confirm","catch","error","setTimeout","nameObject","concat","filterPerson","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38b8df42.chunk.js","sourcesContent":["import axios from \"axios\";\nconst baseUrl = \"/api/persons\";\n\nconst getAll = () => {\n  return axios.get(baseUrl);\n};\n\nconst createPerson = (newObject) => {\n  return axios.post(baseUrl, newObject);\n};\n\nconst updatePerson = (object) => {\n  return axios.put(`${baseUrl}/${object.id}`, object);\n};\n\nconst deletePerson = (id) => {\n  return axios.delete(`${baseUrl}/${id}`);\n};\n\nconst personService = { getAll, createPerson, deletePerson, updatePerson };\nexport default personService;\n","import React, { useEffect, useState } from \"react\";\nimport personService from \"./services/persons\";\n\nconst Filter = (props) => {\n  return (\n    <div>\n      filter shown with <input {...props} />\n    </div>\n  );\n};\n\nconst Form = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <h3>Add a new number</h3>\n      <div>\n        name: <input value={props.newName} onChange={props.handleNameChange} />\n      </div>\n      <div>\n        number:{\" \"}\n        <input value={props.newNumber} onChange={props.handleNumberChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\n\nconst Phonebook = ({ persons, filter, handleDelete }) => {\n  return (\n    <>\n      {persons\n        .filter((person) =>\n          person.name.toLowerCase().includes(filter.toLowerCase())\n        )\n        .map((filteredPerson) => (\n          <p key={filteredPerson.id}>\n            {filteredPerson.name} {filteredPerson.number}{\" \"}\n            <button onClick={() => handleDelete(filteredPerson)}>delete</button>\n          </p>\n        ))}\n    </>\n  );\n};\n\nconst Notification = ({ message, type }) => {\n  if (message === null) {\n    return null;\n  }\n  return <div className={type}>{message}</div>;\n};\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [filter, setFilter] = useState(\"\");\n  const [notificationMessage, setNotificationMessage] = useState(null);\n  const [notificationType, setNotificationType] = useState(\"\");\n\n  useEffect(() => {\n    personService.getAll().then((response) => {\n      setPersons(response.data);\n    });\n  }, []);\n\n  const handleNameChange = (e) => {\n    setNewName(e.target.value);\n  };\n\n  const handleNumberChange = (e) => {\n    setNewNumber(e.target.value);\n  };\n\n  const handleFilterChange = (e) => {\n    setFilter(e.target.value);\n  };\n\n  const handleDelete = (person) => {\n    if (window.confirm(`Delete ${person.name}?`)) {\n      personService.deletePerson(person.id).then(() => {\n        setPersons(\n          persons.filter((filterPerson) => person.id !== filterPerson.id)\n        );\n      });\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let obj = persons.find((person) => person.name === newName);\n    if (obj) {\n      if (\n        window.confirm(\n          `${newName} is already added to phonebook, replace the old number with a new one?`\n        )\n      ) {\n        obj.number = newNumber;\n        personService\n          .updatePerson(obj)\n          .then(() => {\n            setPersons(\n              persons.map((person) => (person.id !== obj.id ? person : obj))\n            );\n            setNotificationType(\"notification\");\n            setNotificationMessage(`Updated ${obj.name}`);\n          })\n          .catch((error) => {\n            setNotificationType(\"error\");\n            setNotificationMessage(\n              `Information of ${obj.name} has already been removed from server`\n            );\n            setTimeout(() => {\n              setNotificationMessage(null);\n            }, 5000);\n          });\n      }\n      return;\n    }\n    const nameObject = {\n      name: newName,\n      number: newNumber,\n    };\n    personService.createPerson(nameObject).then((response) => {\n      setPersons(persons.concat(response.data));\n      setNewName(\"\");\n      setNewNumber(\"\");\n      setNotificationType(\"notification\");\n      setNotificationMessage(`Added ${newName}`);\n      setTimeout(() => {\n        setNotificationMessage(null);\n      }, 5000);\n    });\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notificationMessage} type={notificationType} />\n      <Filter value={filter} onChange={handleFilterChange} />\n      <Form\n        handleSubmit={handleSubmit}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n      />\n\n      <h3>Numbers</h3>\n      <Phonebook\n        persons={persons}\n        filter={filter}\n        handleDelete={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}